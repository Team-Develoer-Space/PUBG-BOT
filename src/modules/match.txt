async def matches(message,platform,update,update_msg,match,player_id,season):
    if update == 1:
         match_id = match
    elif update == 0:
        embed = discord.Embed(title="PUBG",description="최근 검색하실 전적을 고르시기 바랍니다.", color=0xffd619)
        msg1 = await message.channel.send(embed=embed)
        def check1(reaction,user):
            for i in range(5):
                if str(i+1) + "️⃣" == reaction.emoji:
                    return user.id == message.author.id and msg1.id==reaction.message.id
        for i in range(5):
            await msg1.add_reaction(str(i+1) +  "\U0000FE0F\U000020E3")
        reaction, _ = await client.wait_for('reaction_add', check=check1)
        count = 1
        for i in range(5):
            if str(i+1) + "️⃣" == reaction.emoji:
                count = i
                break
        try:
            await msg1.clear_reactions()
        except discord.Forbidden:
            embed = discord.Embed(title="\U000026A0경고!",description="디스코드봇에게 \"메세지 관리\"권한을 부여해주시기 바랍니다.", color=0xaa0000)
            await message.channel.send(embed=embed)
        if platform == "Kakao":
            url1 = "https://api.pubg.com/shards/kakao/players/" + player_id
        else:
            url1 = "https://api.pubg.com/shards/steam/players/" + player_id
        response1 = await requests.get(url1,headers=header)
        json_players = response1.json()
        match_id = json_players["data"]["relationships"]["matches"]["data"][count]["id"]
    def player(html,return_value,find_value):
        if type(html) == dict:
            json_data = html
        else:
            json_data = json.loads(html)
        included = json_data["included"]
        for i in range(len(included)-1):
            if included[i]["type"] == "participant":
                if find_value == "id" and included[i]["id"] == return_value:
                    return included[i]
                elif find_value == "id":
                    continue
                elif included[i]["attributes"]["stats"][find_value] == return_value:
                    return included[i]
    if platform == "Kakao":
        url2 = "https://api.pubg.com/shards/kakao/matches/" + match_id
    elif platform == "Steam":
        url2 = "https://api.pubg.com/shards/steam/matches/" + match_id
    response2 = await requests.get(url2,headers=header)
    json_data = response2.json()
    map_cache = json_data["data"]["attributes"]["mapName"]
    included1 = player(json_data,player_id,"playerId")
    user_id = included1["id"]
    timeSurvived = included1["attributes"]["stats"]["timeSurvived"]
    deals = included1["attributes"]["stats"]["damageDealt"]
    kills = included1["attributes"]["stats"]["kills"]
    assists = included1["attributes"]["stats"]["assists"]
    DBNOs = included1["attributes"]["stats"]["DBNOs"]
    distance = round((included1["attributes"]["stats"]["walkDistance"]+included1["attributes"]["stats"]["swimDistance"]+included1["attributes"]["stats"]["rideDistance"])/1000,3)
    deathType = included1["attributes"]["stats"]["deathType"]
    playtime = datetime.datetime.fromtimestamp(float(timeSurvived),timezone('UTC'))
    r_playtime = time_num(playtime)
    deathT = ["alive", "byplayer", "byzone", "suicide", "logout"]
    deathA = ["생존","유저","블루존","자살","로그 아웃"]
    map_name={
        "Desert_Main": "미라마",
        "DihorOtok_Main": "비켄디",
        "Erangel_Main": "에란겔",
        "Baltic_Main": "에란겔 (리마스터)",
        "Range_Main": "캠프 자칼",
        "Savage_Main": "사녹",
        "Summerland_Main": "카라킨"
    }
    for i in range(5):
        if deathType == deathT[i]:
            deathType = deathA[i]
            break
    included = json_data["included"]
    for i in range(len(included)-1):
        if included[i]["type"] == "roster":
            party = included[i]["relationships"]["participants"]["data"]
            a_tf = False
            for j in range(len(party)):
                if party[j]["id"] == user_id:
                    a_tf = True
                    break
            if a_tf:
                rank = included[i]["attributes"]["stats"]["rank"]
                break
    if not a_tf:
        team_member = "멤버를 불러오지 못했습니다."
    team_member = ""
    for i in range(len(party)):
        player_m = player(json_data,party[i]["id"],"id")
        team_member = team_member + "," + str(player_m["attributes"]["stats"]["name"])
    embed = discord.Embed(color=0xffd619,timestamp=datetime.datetime.now(timezone('UTC')))
    if platform == "Steam":
        icon = discord.File(directory + type_software + "assets" + type_software + "Icon" + type_software + "steam.png")
        embed.set_author(icon_url="attachment://steam.png",name=message.content.split(" ")[1] + "님의 전적")
    elif platform == "Kakao":
        icon = discord.File(directory + type_software + "assets" + type_software + "Icon" + type_software + "kakao.jpg")
        embed.set_author(icon_url="attachment://kakao.jpg",name=message.content.split(" ")[1] + "님의 전적")
    embed.add_field(name="팀원:",value=team_member.replace(',','',1),inline=False)
    embed.add_field(name="맵:",value=map_name[map_cache],inline=True)
    embed.add_field(name="킬/어시:",value=str(kills) + "회/" + str(assists) + "회",inline=True)
    embed.add_field(name="DBNOs:",value=str(DBNOs) + "회",inline=True)
    embed.add_field(name="결과:",value=deathType + "(" + str(rank) + "위)",inline=True)
    embed.add_field(name="이동한 거리:",value=str(distance) + "km",inline=True)
    embed.add_field(name="딜량:",value=str(round(deals,2)),inline=True)
    if update:
        await update_msg.delete()
    msg2 = await message.channel.send(embed=embed)
    try:
        await msg1.delete()
    except:
        pass
    for i in range(2):
        await msg2.add_reaction(str(i+1) + "\U0000FE0F\U000020E3")
    msg3 = await message.channel.send("\U00000031\U0000FE0F\U000020E3 : 종합전적 확인하기 \U00000032\U0000FE0F\U000020E3 : 메뉴중지")
    author = message.author
    message_id = msg2.id
    def check2(reaction, user):
        for i in range(2):
            if str(i+1) + "\U0000FE0F\U000020E3" == reaction.emoji:
                return user == author and message_id == reaction.message.id
    reaction,user = await client.wait_for('reaction_add', check=check2)
    if reaction.emoji == "\U00000032\U0000FE0F\U000020E3":
        await msg2.clear_reactions()
        await msg3.delete()
    elif reaction.emoji == "\U00000031\U0000FE0F\U000020E3":
        await msg2.clear_reactions()
        await msg3.delete()
        if platform == "Kakao":
            url = "https://api.pubg.com/shards/kakao/players/" + player_id + "/seasons/" + season
        else:
            url = "https://api.pubg.com/shards/steam/players/" + player_id + "/seasons/" + season
        response1 = await requests.get(url,headers=header)
        if response1.status_code == 200:
            html = response1.text
        else:
            await response_num(response1,message)
    return
참조용